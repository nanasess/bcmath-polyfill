--- .github/workflows/ci-legacy.yml	2025-06-10 08:28:36.131323555 +0000
+++ .github/workflows/ci-legacy-fixed.yml	2025-06-10 08:30:35.346177705 +0000
@@ -18,76 +18,395 @@
               with:
                   php-version: ${{ matrix.php-version }}
                   extensions: bcmath
+                  tools: none  # Don't install composer by default
+
+            - name: Install Composer 1.x for PHP 5.6-7.1
+              if: matrix.php-version == '5.6' || matrix.php-version == '7.0' || matrix.php-version == '7.1'
+              run: |
+                  curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer --version=1.10.26
 
             - name: Install Composer dependencies (PHP 7.2+)
               if: matrix.php-version >= '7.2'
               run: composer install --no-interaction --no-cache
 
+            - name: Install dependencies with Composer 1.x (PHP 5.6-7.1)
+              if: matrix.php-version == '5.6' || matrix.php-version == '7.0' || matrix.php-version == '7.1'
+              run: composer install --no-interaction --no-cache
+
             - name: Install dependencies manually (PHP 5.4-5.5)
               if: matrix.php-version == '5.4' || matrix.php-version == '5.5'
               run: |
-                  # For PHP 5.4-5.5, use phpseclib 2.x which supports PHP 5.3+
-                  mkdir -p vendor/phpseclib/phpseclib
-                  git clone --depth 1 --branch 2.0 https://github.com/phpseclib/phpseclib.git vendor/phpseclib/phpseclib
-
-                  # Create a simple autoloader for phpseclib 2.x
-                  echo '<?php
-                  spl_autoload_register(function ($class) {
-                      $prefix = "phpseclib\\";
-                      $base_dir = __DIR__ . "/vendor/phpseclib/phpseclib/phpseclib/";
-
-                      $len = strlen($prefix);
-                      if (strncmp($prefix, $class, $len) !== 0) {
-                          return;
+                  # Download phpseclib 2.0.47 which supports PHP 5.3+
+                  mkdir -p vendor/phpseclib
+                  curl -L https://github.com/phpseclib/phpseclib/archive/refs/tags/2.0.47.tar.gz | tar -xz -C vendor/phpseclib
+                  mv vendor/phpseclib/phpseclib-2.0.47 vendor/phpseclib/phpseclib
+
+                  # Create BCMath adapter for phpseclib 2.x
+                  mkdir -p src
+                  cat > src/BCMath.php << 'EOF'
+                  <?php
+                  
+                  namespace phpseclib3\Math;
+                  
+                  require_once __DIR__ . '/../vendor/phpseclib/phpseclib/phpseclib/Math/BigInteger.php';
+                  
+                  class BCMath
+                  {
+                      private static $scale = 0;
+                      
+                      public static function bcadd($left, $right, $scale = null)
+                      {
+                          $scale = ($scale === null) ? self::$scale : $scale;
+                          
+                          // Handle decimal numbers
+                          list($leftInt, $leftDec) = self::splitDecimal($left);
+                          list($rightInt, $rightDec) = self::splitDecimal($right);
+                          
+                          // Align decimal parts
+                          $maxDecLen = max(strlen($leftDec), strlen($rightDec));
+                          $leftDec = str_pad($leftDec, $maxDecLen, '0');
+                          $rightDec = str_pad($rightDec, $maxDecLen, '0');
+                          
+                          // Convert to integers for calculation
+                          $leftBig = new \Math_BigInteger($leftInt . $leftDec);
+                          $rightBig = new \Math_BigInteger($rightInt . $rightDec);
+                          
+                          $result = $leftBig->add($rightBig);
+                          
+                          // Convert back to decimal string
+                          return self::formatResult($result->toString(), $maxDecLen, $scale);
                       }
-
-                      $relative_class = substr($class, $len);
-                      $file = $base_dir . str_replace("\\", "/", $relative_class) . ".php";
-
-                      if (file_exists($file)) {
-                          require $file;
+                      
+                      public static function bcsub($left, $right, $scale = null)
+                      {
+                          $scale = ($scale === null) ? self::$scale : $scale;
+                          
+                          list($leftInt, $leftDec) = self::splitDecimal($left);
+                          list($rightInt, $rightDec) = self::splitDecimal($right);
+                          
+                          $maxDecLen = max(strlen($leftDec), strlen($rightDec));
+                          $leftDec = str_pad($leftDec, $maxDecLen, '0');
+                          $rightDec = str_pad($rightDec, $maxDecLen, '0');
+                          
+                          $leftBig = new \Math_BigInteger($leftInt . $leftDec);
+                          $rightBig = new \Math_BigInteger($rightInt . $rightDec);
+                          
+                          $result = $leftBig->subtract($rightBig);
+                          
+                          return self::formatResult($result->toString(), $maxDecLen, $scale);
                       }
-                  });
-
-                  // Also try without namespace for phpseclib 2.x
-                  spl_autoload_register(function ($class) {
-                      $file = __DIR__ . "/vendor/phpseclib/phpseclib/phpseclib/" . str_replace("_", "/", $class) . ".php";
-                      if (file_exists($file)) {
-                          require $file;
+                      
+                      public static function bcmul($left, $right, $scale = null)
+                      {
+                          $scale = ($scale === null) ? self::$scale : $scale;
+                          
+                          list($leftInt, $leftDec) = self::splitDecimal($left);
+                          list($rightInt, $rightDec) = self::splitDecimal($right);
+                          
+                          $leftDecLen = strlen($leftDec);
+                          $rightDecLen = strlen($rightDec);
+                          
+                          $leftBig = new \Math_BigInteger($leftInt . $leftDec);
+                          $rightBig = new \Math_BigInteger($rightInt . $rightDec);
+                          
+                          $result = $leftBig->multiply($rightBig);
+                          
+                          return self::formatResult($result->toString(), $leftDecLen + $rightDecLen, $scale);
                       }
-                  });
-
-                  // Include the bcmath polyfill
-                  require_once __DIR__ . "/lib/bcmath.php";' > autoload.php
-
-            - name: Install dependencies manually (PHP 5.6-7.1)
-              if: matrix.php-version == '5.6' || matrix.php-version == '7.0' || matrix.php-version == '7.1'
-              run: |
-                  # For PHP 5.6+, use phpseclib 3.x
-                  mkdir -p vendor/phpseclib/phpseclib
-                  git clone --depth 1 --branch 3.0 https://github.com/phpseclib/phpseclib.git vendor/phpseclib/phpseclib
-
-                  # Create a simple autoloader for phpseclib 3.x
-                  echo '<?php
-                  spl_autoload_register(function ($class) {
-                      $prefix = "phpseclib3\\";
-                      $base_dir = __DIR__ . "/vendor/phpseclib/phpseclib/phpseclib/";
-
-                      $len = strlen($prefix);
-                      if (strncmp($prefix, $class, $len) !== 0) {
-                          return;
+                      
+                      public static function bcdiv($left, $right, $scale = null)
+                      {
+                          $scale = ($scale === null) ? self::$scale : $scale;
+                          
+                          if ($right == '0') {
+                              trigger_error('Division by zero', E_USER_WARNING);
+                              return null;
+                          }
+                          
+                          // For division, we need to scale up the dividend
+                          list($leftInt, $leftDec) = self::splitDecimal($left);
+                          list($rightInt, $rightDec) = self::splitDecimal($right);
+                          
+                          $leftDecLen = strlen($leftDec);
+                          $rightDecLen = strlen($rightDec);
+                          
+                          // Scale up for precision
+                          $scaleUp = max($scale + $rightDecLen - $leftDecLen + 10, 0);
+                          
+                          $leftBig = new \Math_BigInteger($leftInt . $leftDec . str_repeat('0', $scaleUp));
+                          $rightBig = new \Math_BigInteger($rightInt . $rightDec);
+                          
+                          list($quotient, ) = $leftBig->divide($rightBig);
+                          
+                          return self::formatResult($quotient->toString(), $scaleUp + $leftDecLen - $rightDecLen, $scale);
                       }
+                      
+                      public static function bcmod($left, $modulus, $scale = null)
+                      {
+                          list($leftInt, ) = self::splitDecimal($left);
+                          list($modInt, ) = self::splitDecimal($modulus);
+                          
+                          $leftBig = new \Math_BigInteger($leftInt);
+                          $modBig = new \Math_BigInteger($modInt);
+                          
+                          $result = $leftBig->modPow(new \Math_BigInteger('1'), $modBig);
+                          
+                          return $result->toString();
+                      }
+                      
+                      public static function bcpow($base, $exponent, $scale = null)
+                      {
+                          $scale = ($scale === null) ? self::$scale : $scale;
+                          
+                          list($baseInt, $baseDec) = self::splitDecimal($base);
+                          $exp = (int)$exponent;
+                          
+                          if ($exp === 0) {
+                              return self::formatResult('1', 0, $scale);
+                          }
+                          
+                          $baseDecLen = strlen($baseDec);
+                          $baseBig = new \Math_BigInteger($baseInt . $baseDec);
+                          
+                          $result = $baseBig->pow(new \Math_BigInteger(abs($exp)));
+                          
+                          if ($exp < 0) {
+                              // Handle negative exponents: 1/result
+                              $one = new \Math_BigInteger('1' . str_repeat('0', $baseDecLen * abs($exp) + $scale + 10));
+                              list($result, ) = $one->divide($result);
+                              return self::formatResult($result->toString(), $scale + 10, $scale);
+                          }
+                          
+                          return self::formatResult($result->toString(), $baseDecLen * $exp, $scale);
+                      }
+                      
+                      public static function bccomp($left, $right, $scale = null)
+                      {
+                          $scale = ($scale === null) ? self::$scale : $scale;
+                          
+                          // Normalize both numbers to same scale
+                          $left = self::bcadd($left, '0', $scale);
+                          $right = self::bcadd($right, '0', $scale);
+                          
+                          if ($left === $right) {
+                              return '0';
+                          }
+                          
+                          // Remove decimal point for comparison
+                          $leftClean = str_replace('.', '', $left);
+                          $rightClean = str_replace('.', '', $right);
+                          
+                          // Handle negative numbers
+                          $leftNeg = (strpos($left, '-') === 0);
+                          $rightNeg = (strpos($right, '-') === 0);
+                          
+                          if ($leftNeg && !$rightNeg) {
+                              return '-1';
+                          }
+                          if (!$leftNeg && $rightNeg) {
+                              return '1';
+                          }
+                          
+                          $leftBig = new \Math_BigInteger($leftClean);
+                          $rightBig = new \Math_BigInteger($rightClean);
+                          
+                          $cmp = $leftBig->compare($rightBig);
+                          
+                          return (string)$cmp;
+                      }
+                      
+                      public static function bcscale($scale = null)
+                      {
+                          if ($scale === null) {
+                              return self::$scale;
+                          }
+                          
+                          $oldScale = self::$scale;
+                          self::$scale = (int)$scale;
+                          return true;
+                      }
+                      
+                      public static function bcsqrt($operand, $scale = null)
+                      {
+                          $scale = ($scale === null) ? self::$scale : $scale;
+                          
+                          list($intPart, $decPart) = self::splitDecimal($operand);
+                          
+                          // Scale up for precision
+                          $scaleUp = ($scale + 1) * 2;
+                          $decLen = strlen($decPart);
+                          
+                          // Make sure we have even decimal places for sqrt
+                          if (($decLen % 2) !== 0) {
+                              $decPart .= '0';
+                              $decLen++;
+                          }
+                          
+                          $operandBig = new \Math_BigInteger($intPart . $decPart . str_repeat('0', $scaleUp));
+                          
+                          // Newton's method for square root
+                          $x = $operandBig;
+                          $two = new \Math_BigInteger('2');
+                          
+                          for ($i = 0; $i < 100; $i++) {
+                              list($div, ) = $operandBig->divide($x);
+                              $sum = $x->add($div);
+                              list($newX, ) = $sum->divide($two);
+                              
+                              if ($newX->equals($x)) {
+                                  break;
+                              }
+                              $x = $newX;
+                          }
+                          
+                          return self::formatResult($x->toString(), ($scaleUp + $decLen) / 2, $scale);
+                      }
+                      
+                      public static function bcpowmod($base, $exponent, $modulus, $scale = null)
+                      {
+                          list($baseInt, ) = self::splitDecimal($base);
+                          list($expInt, ) = self::splitDecimal($exponent);
+                          list($modInt, ) = self::splitDecimal($modulus);
+                          
+                          $baseBig = new \Math_BigInteger($baseInt);
+                          $expBig = new \Math_BigInteger($expInt);
+                          $modBig = new \Math_BigInteger($modInt);
+                          
+                          $result = $baseBig->modPow($expBig, $modBig);
+                          
+                          return $result->toString();
+                      }
+                      
+                      private static function splitDecimal($number)
+                      {
+                          $number = (string)$number;
+                          
+                          // Remove leading zeros
+                          $number = ltrim($number, '0') ?: '0';
+                          
+                          if (strpos($number, '.') !== false) {
+                              list($int, $dec) = explode('.', $number, 2);
+                              $dec = rtrim($dec, '0');
+                          } else {
+                              $int = $number;
+                              $dec = '';
+                          }
+                          
+                          if ($int === '') {
+                              $int = '0';
+                          }
+                          
+                          return array($int, $dec);
+                      }
+                      
+                      private static function formatResult($result, $decimalPlaces, $scale)
+                      {
+                          $negative = false;
+                          if (strpos($result, '-') === 0) {
+                              $negative = true;
+                              $result = substr($result, 1);
+                          }
+                          
+                          if ($decimalPlaces > 0) {
+                              $result = str_pad($result, $decimalPlaces + 1, '0', STR_PAD_LEFT);
+                              $intPart = substr($result, 0, -$decimalPlaces);
+                              $decPart = substr($result, -$decimalPlaces);
+                              
+                              if ($scale === 0) {
+                                  $result = $intPart ?: '0';
+                              } else {
+                                  $decPart = substr($decPart, 0, $scale);
+                                  $decPart = str_pad($decPart, $scale, '0');
+                                  $result = ($intPart ?: '0') . '.' . $decPart;
+                              }
+                          } else {
+                              if ($scale > 0) {
+                                  $result .= '.' . str_repeat('0', $scale);
+                              }
+                          }
+                          
+                          if ($negative && $result !== '0' && $result !== '0.' . str_repeat('0', $scale)) {
+                              $result = '-' . $result;
+                          }
+                          
+                          return $result;
+                      }
+                  }
+                  
+                  // Create polyfill functions
+                  if (!function_exists('bcadd')) {
+                      function bcadd($left, $right, $scale = 0) {
+                          return BCMath::bcadd($left, $right, $scale);
+                      }
+                  }
+                  
+                  if (!function_exists('bcsub')) {
+                      function bcsub($left, $right, $scale = 0) {
+                          return BCMath::bcsub($left, $right, $scale);
+                      }
+                  }
+                  
+                  if (!function_exists('bcmul')) {
+                      function bcmul($left, $right, $scale = 0) {
+                          return BCMath::bcmul($left, $right, $scale);
+                      }
+                  }
+                  
+                  if (!function_exists('bcdiv')) {
+                      function bcdiv($left, $right, $scale = 0) {
+                          return BCMath::bcdiv($left, $right, $scale);
+                      }
+                  }
+                  
+                  if (!function_exists('bcmod')) {
+                      function bcmod($left, $modulus, $scale = 0) {
+                          return BCMath::bcmod($left, $modulus, $scale);
+                      }
+                  }
+                  
+                  if (!function_exists('bcpow')) {
+                      function bcpow($base, $exponent, $scale = 0) {
+                          return BCMath::bcpow($base, $exponent, $scale);
+                      }
+                  }
+                  
+                  if (!function_exists('bcscale')) {
+                      function bcscale($scale = null) {
+                          return BCMath::bcscale($scale);
+                      }
+                  }
+                  
+                  if (!function_exists('bccomp')) {
+                      function bccomp($left, $right, $scale = 0) {
+                          return BCMath::bccomp($left, $right, $scale);
+                      }
+                  }
+                  
+                  if (!function_exists('bcsqrt')) {
+                      function bcsqrt($operand, $scale = 0) {
+                          return BCMath::bcsqrt($operand, $scale);
+                      }
+                  }
+                  
+                  if (!function_exists('bcpowmod')) {
+                      function bcpowmod($base, $exponent, $modulus, $scale = 0) {
+                          return BCMath::bcpowmod($base, $exponent, $modulus, $scale);
+                      }
+                  }
+                  EOF
 
-                      $relative_class = substr($class, $len);
-                      $file = $base_dir . str_replace("\\", "/", $relative_class) . ".php";
-
-                      if (file_exists($file)) {
-                          require $file;
+                  # Create autoloader
+                  cat > autoload.php << 'EOF'
+                  <?php
+                  spl_autoload_register(function ($class) {
+                      if (strpos($class, 'Math_BigInteger') === 0) {
+                          require_once __DIR__ . '/vendor/phpseclib/phpseclib/phpseclib/Math/BigInteger.php';
                       }
                   });
-
-                  // Include the bcmath polyfill
-                  require_once __DIR__ . "/lib/bcmath.php";' > autoload.php
+                  
+                  require_once __DIR__ . '/src/BCMath.php';
+                  require_once __DIR__ . '/lib/bcmath.php';
+                  EOF
 
             - name: Run tests with simple test runner
               run: php tests/simple-test-runner.php
@@ -98,4 +417,4 @@
         strategy:
             fail-fast: false
             matrix:
-                php-version: ['5.4', '5.5', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0']
+                php-version: ['5.4', '5.5', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0']
\ No newline at end of file
